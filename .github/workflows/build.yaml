name: Build

on:
  push:
    branches: [master]

  pull_request:

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v3

      - name: Cache node_modules
        id: cache-deps
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        # check if cache-hit happened then do not execute npm ci
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci --no-audit

      - name: Audit dependencies
        run: npx audit-ci@^7 --config ./.audit-ci.jsonc

      - name: Run tests
        run: npm run test --if-present

      - name: Lint
        run: npm run lint

      - name: Check types
        run: npm run typecheck

      - name: Build the app
        run: npm run build

      - uses: twingate/github-action@v1.5
        if: github.event_name == 'push' && github.ref_name == 'master'
        with:
          service-key: ${{ secrets.SERVICE_KEY }}

      - name: Copy files to the server
        if: github.event_name == 'push' && github.ref_name == 'master'
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          source: "./*"
          target: "/home/${{ secrets.SSH_USERNAME }}/dcbot/app"

      - name: Run container
        if: github.event_name == 'push' && github.ref_name == 'master'
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            cd ~/dcbot/app
            if [ "$(docker ps -aq -f name=discord-bot)" ]; then
              docker rm discord-bot --force
            fi
            # optionally remove the old image
            if [ "$(docker images -q discord-bot:latest)" ]; then
              docker rmi discord-bot:latest --force
            fi
            docker build -t discord-bot:latest .
            docker run -d --name discord-bot --env-file ../.env discord-bot
